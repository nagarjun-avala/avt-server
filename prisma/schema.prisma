generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String    @id @default(uuid()) @db.Uuid
  username    String    @unique @db.VarChar(50)
  fullname    String    @db.VarChar(100)
  email       String?   @db.VarChar(100)
  mobile      String?   @db.VarChar(15)
  password    String
  roleId      String    @db.Uuid
  role        Role      @relation(fields: [roleId], references: [id])
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdByAdminId String? @unique @db.Uuid
  updatedByAdminId String? @db.Uuid

  createdByAdmin Admin? @relation("AdminCreatedBy", fields: [createdByAdminId], references: [id])
  updatedByAdmin Admin? @relation("AdminUpdatedBy", fields: [updatedByAdminId], references: [id])

  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")

  createdAdmins Admin[] @relation("AdminCreatedBy")
  updatedAdmins Admin[] @relation("AdminUpdatedBy")

  @@index([roleId])
}

model Role {
  id          String    @id @default(uuid()) @db.Uuid
  code        String    @unique @db.VarChar(50)
  label       String    @unique @db.VarChar(100)
  short       String    @db.VarChar(20)
  description String?   @db.Text
  isActive    Boolean   @default(true)
  type        String    @default("custom") @db.VarChar(50)
  priority    Int       @default(0)
  activatedAt DateTime?
  canDelete   Boolean   @default(true)
  canUpdate   Boolean   @default(true)

  createdById String? @db.Uuid
  updatedById String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy Admin? @relation("RoleCreatedBy", fields: [createdById], references: [id])
  updatedBy Admin? @relation("RoleUpdatedBy", fields: [updatedById], references: [id])

  Admins Admin[]

  @@index([label]) // Optimized querying by label
  @@index([priority]) // Optimized ordering by priority
}

model Product {
  id             String   @id @default(uuid()) @db.Uuid
  barcodeId      String   @unique @db.Uuid
  name           String
  description    String?
  categoryId     String   @db.Uuid
  price          Float
  stockQty       BigInt
  stockThreshold Int      @default(0)
  averageRating  Decimal  @default(0.0) @db.Decimal(2, 1)
  reviewCount    Int      @default(0)
  images         Json?
  reviews        Review[]
  supplierId     String   @db.Uuid

  category Category @relation("ProductToCategory", fields: [categoryId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])
  barcode  Barcode  @relation(fields: [barcodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InventoryTransaction InventoryTransaction[]
}

model Category {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @unique @db.VarChar(100)
  slug         String     @unique
  parentId     String?    @db.Uuid
  parent       Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children     Category[] @relation("CategoryToParent")
  level        Int        @default(0)
  displayOrder Int        @default(0)
  isActive     Boolean    @default(true)
  description  String?    @db.Text

  createdBy String? @db.Uuid
  updatedBy String? @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[] @relation("ProductToCategory")

  @@unique([name, parentId]) // Enforce unique names within the same parent
  @@index([parentId]) // Optimize hierarchical lookups
}

model Supplier {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  mobile    String    @unique
  email     String?   @unique
  website   String
  addressId String    @db.Uuid
  address   Address?  @relation(fields: [addressId], references: [id])
  products  Product[]
  isActive  Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id         String  @id @default(uuid()) @db.Uuid
  rating     Int     @default(0)
  comment    String?
  userId     String  @db.Uuid
  productId  String  @db.Uuid
  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model Barcode {
  id      String    @id @default(uuid()) @db.Uuid
  code    String    @unique
  ean13   String?   @unique
  type    String    @default("UPC") @db.VarChar(10)
  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id     String  @id @default(uuid()) @db.Uuid
  email  String  @unique
  name   String
  mobile String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Review    Review[]
}

// Embedded type for storing address details
// Using JSON type in PostgreSQL to store the Address as JSON object
model InventoryTransaction {
  id              String   @id @default(uuid()) @db.Uuid
  productId       String   @db.Uuid
  product         Product  @relation(fields: [productId], references: [id])
  quantity        Int
  type            String // e.g., "IN" for stock added, "OUT" for stock removed
  transactionDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id         String   @id @default(uuid()) @db.Uuid
  street     String
  cityId     String   @db.Uuid
  stateId    String   @db.Uuid
  countryId  String   @db.Uuid
  postalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  city     City       @relation(fields: [cityId], references: [id])
  state    State      @relation(fields: [stateId], references: [id])
  country  Country    @relation(fields: [countryId], references: [id])
  Supplier Supplier[]

  @@index([cityId])
  @@index([stateId])
  @@index([countryId])
}

model Country {
  id         String    @id @default(uuid()) @db.Uuid
  name       String    @unique
  code       String    @unique
  mobileCode String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  states     State[]
  addresses  Address[]

  @@index([name])
}

model State {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  code      String
  countryId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country   Country   @relation(fields: [countryId], references: [id])
  cities    City[]
  addresses Address[]

  @@unique([name, countryId]) // Ensures state names are unique within a country
  @@index([countryId])
}

model City {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  stateId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state     State     @relation(fields: [stateId], references: [id])
  addresses Address[]

  @@unique([name, stateId]) // Ensures city names are unique within a state
  @@index([stateId])
}
