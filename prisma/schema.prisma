generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String  @id @default(uuid()) @db.Uuid
  username String  @unique
  fullname String
  email    String?
  mobile   String?
  password String
  roleId   String  @db.Uuid
  role     Role    @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id    String @id @default(uuid()) @db.Uuid
  code  String @unique
  label String
  short String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Admins Admin[]
}

model Product {
  id            String   @id @default(uuid()) @db.Uuid
  barcodeId     String   @unique @db.Uuid
  name          String
  description   String?
  categoryId    String   @db.Uuid
  price         Float
  stockQty      BigInt
  averageRating Float    @default(0.0)
  reviewCount   Int      @default(0)
  reviews       Review[]
  supplierId    String   @db.Uuid

  category Category @relation("ProductToCategory", fields: [categoryId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])
  barcode  Barcode  @relation(fields: [barcodeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InventoryTransaction InventoryTransaction[]
}

model Category {
  id       String     @id @default(uuid()) @db.Uuid
  name     String     @unique
  parentId String?    @db.Uuid
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Category[] @relation("CategoryToParent")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[] @relation("ProductToCategory")
}

model Review {
  id        String  @id @default(uuid()) @db.Uuid
  rating    Int     @default(0) // Rating scale, e.g., 1-5
  comment   String?
  userId    String  @db.Uuid // Reference to the user who made the review
  productId String  @db.Uuid // Foreign key to Product

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model User {
  id     String  @id @default(uuid()) @db.Uuid
  email  String  @unique
  name   String
  mobile String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Review    Review[]
}

model Supplier {
  id       String    @id @default(uuid()) @db.Uuid
  name     String
  contact  String
  website  String
  address  Json
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Embedded type for storing address details
// Using JSON type in PostgreSQL to store the Address as JSON object
model InventoryTransaction {
  id              String   @id @default(uuid()) @db.Uuid
  productId       String   @db.Uuid
  product         Product  @relation(fields: [productId], references: [id])
  quantity        Int
  type            String // e.g., "IN" for stock added, "OUT" for stock removed
  transactionDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Barcode {
  id      String    @id @default(uuid()) @db.Uuid
  code    String    @unique
  ean13   String?   @unique
  Product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
